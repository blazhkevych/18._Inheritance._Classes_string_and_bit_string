/*
############################################ ЗАДАНИЕ ###########################################
				Разработать базовый класс «Строка».
	Методы:
	 конструктор без параметров;
	 конструктор, принимающий в качестве параметра C-строку
(заканчивается нулевым байтом);
	 конструктор копирования;
	 оператор присваивания;
	 получение длины строки;
	 очистка строки (сделать строку пустой);
	 деструктор;
	 конкатенация строк (перегрузить операторы + и +=);
	 проверка на равенство (= =) и на неравенство (!=).
				Разработать класс «Битовая строка», производный от класса «Строка».
	Строки данного класса могут содержать только символы ‘0’ и ‘1’. Если в основе
инициализирующей строки встретятся любые символы, отличные от
допустимых, то «Битовая строка» становится пустой. Содержимое строки
рассматривается как двоичное представление целого числа со знаковым
разрядом. Отрицательные числа хранятся в дополнительном коде.
	Методы:
	 конструктор без параметров;
	 конструктор, принимающий в качестве параметра C-строку;
	 конструктор копирования;
	 оператор присваивания;
	 деструктор;
	 изменение знака числа (перевод числа в дополнительный код);
	 сложение битовых строк (перегрузить операторы + и +=);
	 проверка на равенство (= =) и на неравенство (!=)
################################################################################################
02,34,03

*/

#include <iostream>

#include "MyString.h"

int main()
{
	// Конструктор без параметров; // ОК
	MyString str;

	// Преобразование строкового литерала в
	// массив символов
	char temp[] = "Hello, ";

	// Конструктор, с одним аргументом, принимающий в качестве параметра C - строку // ОК
	// (заканчивается нулевым байтом).
	MyString b{ temp };

	// Конструктор копирования // ОК
	MyString c{ str };

	// Конструктор переноса. // OK
	// Перегруженный оператор + // OK
	char temp1[] = "World !!!";
	MyString str4{ temp1 };
	MyString str3 = b + temp1;

	// Перегруженный оператор +=.
	MyString str5;
	str5 += b; // не работает.

	str5;

}
